// Package apiclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apiclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CreateDatasourceRequestKind.
const (
	CreateDatasourceRequestKindMysql       CreateDatasourceRequestKind = "mysql"
	CreateDatasourceRequestKindPostgres    CreateDatasourceRequestKind = "postgres"
	CreateDatasourceRequestKindTimescaledb CreateDatasourceRequestKind = "timescaledb"
)

// Defines values for DatasourceResponseHealthStatus.
const (
	DatasourceResponseHealthStatusHealthy   DatasourceResponseHealthStatus = "healthy"
	DatasourceResponseHealthStatusUnhealthy DatasourceResponseHealthStatus = "unhealthy"
	DatasourceResponseHealthStatusUnknown   DatasourceResponseHealthStatus = "unknown"
)

// Defines values for DatasourceResponseKind.
const (
	DatasourceResponseKindMysql       DatasourceResponseKind = "mysql"
	DatasourceResponseKindPostgres    DatasourceResponseKind = "postgres"
	DatasourceResponseKindTimescaledb DatasourceResponseKind = "timescaledb"
)

// Defines values for HealthCheckResponseStatus.
const (
	HealthCheckResponseStatusHealthy   HealthCheckResponseStatus = "healthy"
	HealthCheckResponseStatusUnhealthy HealthCheckResponseStatus = "unhealthy"
)

// Defines values for ReportRunStatus.
const (
	Completed ReportRunStatus = "completed"
	Failed    ReportRunStatus = "failed"
	Running   ReportRunStatus = "running"
)

// Defines values for ReportVersionStatus.
const (
	ReportVersionStatusActive   ReportVersionStatus = "active"
	ReportVersionStatusArchived ReportVersionStatus = "archived"
	ReportVersionStatusDraft    ReportVersionStatus = "draft"
)

// Defines values for ScopeStatus.
const (
	ScopeStatusApproved ScopeStatus = "approved"
	ScopeStatusArchived ScopeStatus = "archived"
	ScopeStatusDraft    ScopeStatus = "draft"
)

// Defines values for GetV1ReportsKeyExportParamsFormat.
const (
	Json GetV1ReportsKeyExportParamsFormat = "json"
	Yaml GetV1ReportsKeyExportParamsFormat = "yaml"
)

// AnalyzeRunRequest defines model for AnalyzeRunRequest.
type AnalyzeRunRequest struct {
	ModelUsed     *string `json:"model_used,omitempty"`
	RubricVersion *string `json:"rubric_version,omitempty"`
}

// BuildIRRequest defines model for BuildIRRequest.
type BuildIRRequest struct {
	ScopeVersionId int64 `json:"scope_version_id"`
}

// CreateDatasourceRequest defines model for CreateDatasourceRequest.
type CreateDatasourceRequest struct {
	DisplayName string                      `json:"display_name"`
	Dsn         string                      `json:"dsn"`
	Id          string                      `json:"id"`
	IsDefault   *bool                       `json:"is_default,omitempty"`
	Kind        CreateDatasourceRequestKind `json:"kind"`
}

// CreateDatasourceRequestKind defines model for CreateDatasourceRequest.Kind.
type CreateDatasourceRequestKind string

// CreateReportRequest defines model for CreateReportRequest.
type CreateReportRequest struct {
	Key   string  `json:"key"`
	Owner *string `json:"owner,omitempty"`
	Title string  `json:"title"`
}

// CreateReportVersionRequest defines model for CreateReportVersionRequest.
type CreateReportVersionRequest struct {
	DatasourceId *string `json:"datasource_id,omitempty"`

	// DefJson Report definition JSON
	DefJson        string `json:"def_json"`
	ScopeVersionId int64  `json:"scope_version_id"`
}

// CreateScopeRequest defines model for CreateScopeRequest.
type CreateScopeRequest struct {
	Name string `json:"name"`
}

// CreateScopeVersionRequest defines model for CreateScopeVersionRequest.
type CreateScopeVersionRequest struct {
	ScopeMd string `json:"scope_md"`
}

// DatasourceResponse defines model for DatasourceResponse.
type DatasourceResponse struct {
	DisplayName  *string                         `json:"display_name,omitempty"`
	Error        *string                         `json:"error,omitempty"`
	HealthStatus *DatasourceResponseHealthStatus `json:"health_status,omitempty"`
	Id           *string                         `json:"id,omitempty"`
	IsDefault    *bool                           `json:"is_default,omitempty"`
	Kind         *DatasourceResponseKind         `json:"kind,omitempty"`
	LastHealth   *time.Time                      `json:"last_health,omitempty"`
}

// DatasourceResponseHealthStatus defines model for DatasourceResponse.HealthStatus.
type DatasourceResponseHealthStatus string

// DatasourceResponseKind defines model for DatasourceResponse.Kind.
type DatasourceResponseKind string

// DatasourcesResponse defines model for DatasourcesResponse.
type DatasourcesResponse struct {
	Datasources *[]DatasourceResponse `json:"datasources,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Details *string `json:"details,omitempty"`
	Error   *string `json:"error,omitempty"`
}

// GenerateSQLRequest defines model for GenerateSQLRequest.
type GenerateSQLRequest struct {
	DatasourceId string `json:"datasource_id"`

	// Ir Intermediate Representation JSON
	Ir map[string]interface{} `json:"ir"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Error  *string                    `json:"error,omitempty"`
	Status *HealthCheckResponseStatus `json:"status,omitempty"`
}

// HealthCheckResponseStatus defines model for HealthCheckResponse.Status.
type HealthCheckResponseStatus string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	AuthEnabled *bool   `json:"auth_enabled,omitempty"`
	Datasources *int    `json:"datasources,omitempty"`
	Status      *string `json:"status,omitempty"`
}

// LearnDatasourceRequest defines model for LearnDatasourceRequest.
type LearnDatasourceRequest struct {
	DatasourceId string    `json:"datasource_id"`
	Schemas      *[]string `json:"schemas,omitempty"`
}

// Report defines model for Report.
type Report struct {
	Archived  *bool      `json:"archived,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *int64     `json:"id,omitempty"`
	Key       *string    `json:"key,omitempty"`
	Owner     *string    `json:"owner,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ReportAnalysis defines model for ReportAnalysis.
type ReportAnalysis struct {
	AnalysisMd    *string    `json:"analysis_md,omitempty"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Id            *int64     `json:"id,omitempty"`
	ModelUsed     *string    `json:"model_used,omitempty"`
	RubricVersion *string    `json:"rubric_version,omitempty"`
	RunId         *int64     `json:"run_id,omitempty"`
	VerdictJson   *string    `json:"verdict_json,omitempty"`
}

// ReportRun defines model for ReportRun.
type ReportRun struct {
	DatasourceId    *string          `json:"datasource_id,omitempty"`
	ErrorText       *string          `json:"error_text,omitempty"`
	FinishedAt      *time.Time       `json:"finished_at,omitempty"`
	Id              *int64           `json:"id,omitempty"`
	ParamsJson      *string          `json:"params_json,omitempty"`
	ReportId        *int64           `json:"report_id,omitempty"`
	ReportVersionId *int64           `json:"report_version_id,omitempty"`
	RowCount        *int             `json:"row_count,omitempty"`
	SqlText         *string          `json:"sql_text,omitempty"`
	StartedAt       *time.Time       `json:"started_at,omitempty"`
	Status          *ReportRunStatus `json:"status,omitempty"`
}

// ReportRunStatus defines model for ReportRun.Status.
type ReportRunStatus string

// ReportVersion defines model for ReportVersion.
type ReportVersion struct {
	Checksum       *string              `json:"checksum,omitempty"`
	CreatedAt      *time.Time           `json:"created_at,omitempty"`
	DatasourceId   *string              `json:"datasource_id,omitempty"`
	DefJson        *string              `json:"def_json,omitempty"`
	Id             *int64               `json:"id,omitempty"`
	ReportId       *int64               `json:"report_id,omitempty"`
	ScopeVersionId *int64               `json:"scope_version_id,omitempty"`
	Status         *ReportVersionStatus `json:"status,omitempty"`
	Version        *int                 `json:"version,omitempty"`
}

// ReportVersionStatus defines model for ReportVersion.Status.
type ReportVersionStatus string

// RunReportRequest defines model for RunReportRequest.
type RunReportRequest struct {
	DatasourceId *string `json:"datasource_id,omitempty"`

	// Params Report parameters
	Params map[string]interface{} `json:"params"`
}

// SchemaNote defines model for SchemaNote.
type SchemaNote struct {
	Chunk        *int       `json:"chunk,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	DatasourceId *string    `json:"datasource_id,omitempty"`
	Id           *int64     `json:"id,omitempty"`
	Md           *string    `json:"md,omitempty"`
	MdHash       *string    `json:"md_hash,omitempty"`
	Object       *string    `json:"object,omitempty"`
}

// Scope defines model for Scope.
type Scope struct {
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	Id        *int64       `json:"id,omitempty"`
	Name      *string      `json:"name,omitempty"`
	Status    *ScopeStatus `json:"status,omitempty"`
	UpdatedAt *time.Time   `json:"updated_at,omitempty"`
}

// ScopeStatus defines model for Scope.Status.
type ScopeStatus string

// ScopeVersion defines model for ScopeVersion.
type ScopeVersion struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *int64     `json:"id,omitempty"`
	IrJson    *string    `json:"ir_json,omitempty"`
	ScopeId   *int64     `json:"scope_id,omitempty"`
	ScopeMd   *string    `json:"scope_md,omitempty"`
	Version   *int       `json:"version,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Message *string `json:"message,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalError defines model for InternalError.
type InternalError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorResponse

// PostV1LearnParams defines parameters for PostV1Learn.
type PostV1LearnParams struct {
	// DatasourceId Datasource ID to learn from
	DatasourceId string `form:"datasource_id" json:"datasource_id"`
}

// GetV1ReportsKeyExportParams defines parameters for GetV1ReportsKeyExport.
type GetV1ReportsKeyExportParams struct {
	// Format Export format
	Format *GetV1ReportsKeyExportParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetV1ReportsKeyExportParamsFormat defines parameters for GetV1ReportsKeyExport.
type GetV1ReportsKeyExportParamsFormat string

// PostV1ReportsKeyRunParams defines parameters for PostV1ReportsKeyRun.
type PostV1ReportsKeyRunParams struct {
	// DatasourceId Datasource ID (for portable reports)
	DatasourceId *string `form:"datasource_id,omitempty" json:"datasource_id,omitempty"`
}

// PostV1DatasourcesJSONRequestBody defines body for PostV1Datasources for application/json ContentType.
type PostV1DatasourcesJSONRequestBody = CreateDatasourceRequest

// PostV1IrBuildJSONRequestBody defines body for PostV1IrBuild for application/json ContentType.
type PostV1IrBuildJSONRequestBody = BuildIRRequest

// PostV1LearnJSONRequestBody defines body for PostV1Learn for application/json ContentType.
type PostV1LearnJSONRequestBody = LearnDatasourceRequest

// PostV1ReportsJSONRequestBody defines body for PostV1Reports for application/json ContentType.
type PostV1ReportsJSONRequestBody = CreateReportRequest

// PostV1ReportsKeyRunJSONRequestBody defines body for PostV1ReportsKeyRun for application/json ContentType.
type PostV1ReportsKeyRunJSONRequestBody = RunReportRequest

// PostV1ReportsKeyVersionsJSONRequestBody defines body for PostV1ReportsKeyVersions for application/json ContentType.
type PostV1ReportsKeyVersionsJSONRequestBody = CreateReportVersionRequest

// PostV1RunsRunIdAnalyzeJSONRequestBody defines body for PostV1RunsRunIdAnalyze for application/json ContentType.
type PostV1RunsRunIdAnalyzeJSONRequestBody = AnalyzeRunRequest

// PostV1ScopesJSONRequestBody defines body for PostV1Scopes for application/json ContentType.
type PostV1ScopesJSONRequestBody = CreateScopeRequest

// PostV1ScopesIdVersionJSONRequestBody defines body for PostV1ScopesIdVersion for application/json ContentType.
type PostV1ScopesIdVersionJSONRequestBody = CreateScopeVersionRequest

// PostV1SqlJSONRequestBody defines body for PostV1Sql for application/json ContentType.
type PostV1SqlJSONRequestBody = GenerateSQLRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AiTools request
	GetV1AiTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Datasources request
	GetV1Datasources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1DatasourcesWithBody request with any body
	PostV1DatasourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Datasources(ctx context.Context, body PostV1DatasourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1DatasourcesId request
	DeleteV1DatasourcesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1DatasourcesIdHealth request
	GetV1DatasourcesIdHealth(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1IrBuildWithBody request with any body
	PostV1IrBuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1IrBuild(ctx context.Context, body PostV1IrBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1LearnWithBody request with any body
	PostV1LearnWithBody(ctx context.Context, params *PostV1LearnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Learn(ctx context.Context, params *PostV1LearnParams, body PostV1LearnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ReportsWithBody request with any body
	PostV1ReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Reports(ctx context.Context, body PostV1ReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ReportsKey request
	GetV1ReportsKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ReportsKeyExport request
	GetV1ReportsKeyExport(ctx context.Context, key string, params *GetV1ReportsKeyExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ReportsKeyRunWithBody request with any body
	PostV1ReportsKeyRunWithBody(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ReportsKeyRun(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, body PostV1ReportsKeyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ReportsKeyVersionsWithBody request with any body
	PostV1ReportsKeyVersionsWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ReportsKeyVersions(ctx context.Context, key string, body PostV1ReportsKeyVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1RunsRunIdAnalyzeWithBody request with any body
	PostV1RunsRunIdAnalyzeWithBody(ctx context.Context, runId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1RunsRunIdAnalyze(ctx context.Context, runId int64, body PostV1RunsRunIdAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1SchemaDatasourceId request
	GetV1SchemaDatasourceId(ctx context.Context, datasourceId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ScopesWithBody request with any body
	PostV1ScopesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Scopes(ctx context.Context, body PostV1ScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ScopesId request
	GetV1ScopesId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ScopesIdVersionWithBody request with any body
	PostV1ScopesIdVersionWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ScopesIdVersion(ctx context.Context, id int64, body PostV1ScopesIdVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1SqlWithBody request with any body
	PostV1SqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Sql(ctx context.Context, body PostV1SqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1Ws request
	GetV1Ws(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AiTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AiToolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Datasources(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DatasourcesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1DatasourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DatasourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Datasources(ctx context.Context, body PostV1DatasourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1DatasourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1DatasourcesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1DatasourcesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1DatasourcesIdHealth(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1DatasourcesIdHealthRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IrBuildWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IrBuildRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1IrBuild(ctx context.Context, body PostV1IrBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1IrBuildRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1LearnWithBody(ctx context.Context, params *PostV1LearnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1LearnRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Learn(ctx context.Context, params *PostV1LearnParams, body PostV1LearnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1LearnRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReportsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReportsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Reports(ctx context.Context, body PostV1ReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReportsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ReportsKey(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ReportsKeyRequest(c.Server, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ReportsKeyExport(ctx context.Context, key string, params *GetV1ReportsKeyExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ReportsKeyExportRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReportsKeyRunWithBody(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReportsKeyRunRequestWithBody(c.Server, key, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReportsKeyRun(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, body PostV1ReportsKeyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReportsKeyRunRequest(c.Server, key, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReportsKeyVersionsWithBody(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReportsKeyVersionsRequestWithBody(c.Server, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ReportsKeyVersions(ctx context.Context, key string, body PostV1ReportsKeyVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ReportsKeyVersionsRequest(c.Server, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1RunsRunIdAnalyzeWithBody(ctx context.Context, runId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1RunsRunIdAnalyzeRequestWithBody(c.Server, runId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1RunsRunIdAnalyze(ctx context.Context, runId int64, body PostV1RunsRunIdAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1RunsRunIdAnalyzeRequest(c.Server, runId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1SchemaDatasourceId(ctx context.Context, datasourceId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1SchemaDatasourceIdRequest(c.Server, datasourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ScopesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScopesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Scopes(ctx context.Context, body PostV1ScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScopesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ScopesId(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ScopesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ScopesIdVersionWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScopesIdVersionRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ScopesIdVersion(ctx context.Context, id int64, body PostV1ScopesIdVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ScopesIdVersionRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1SqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SqlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Sql(ctx context.Context, body PostV1SqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1SqlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1Ws(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1WsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1AiToolsRequest generates requests for GetV1AiTools
func NewGetV1AiToolsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ai/tools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DatasourcesRequest generates requests for GetV1Datasources
func NewGetV1DatasourcesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/datasources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1DatasourcesRequest calls the generic PostV1Datasources builder with application/json body
func NewPostV1DatasourcesRequest(server string, body PostV1DatasourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1DatasourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1DatasourcesRequestWithBody generates requests for PostV1Datasources with any type of body
func NewPostV1DatasourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/datasources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteV1DatasourcesIdRequest generates requests for DeleteV1DatasourcesId
func NewDeleteV1DatasourcesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/datasources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1DatasourcesIdHealthRequest generates requests for GetV1DatasourcesIdHealth
func NewGetV1DatasourcesIdHealthRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/datasources/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1IrBuildRequest calls the generic PostV1IrBuild builder with application/json body
func NewPostV1IrBuildRequest(server string, body PostV1IrBuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1IrBuildRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1IrBuildRequestWithBody generates requests for PostV1IrBuild with any type of body
func NewPostV1IrBuildRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ir/build")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1LearnRequest calls the generic PostV1Learn builder with application/json body
func NewPostV1LearnRequest(server string, params *PostV1LearnParams, body PostV1LearnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1LearnRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1LearnRequestWithBody generates requests for PostV1Learn with any type of body
func NewPostV1LearnRequestWithBody(server string, params *PostV1LearnParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/learn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "datasource_id", runtime.ParamLocationQuery, params.DatasourceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ReportsRequest calls the generic PostV1Reports builder with application/json body
func NewPostV1ReportsRequest(server string, body PostV1ReportsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ReportsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ReportsRequestWithBody generates requests for PostV1Reports with any type of body
func NewPostV1ReportsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reports")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ReportsKeyRequest generates requests for GetV1ReportsKey
func NewGetV1ReportsKeyRequest(server string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reports/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV1ReportsKeyExportRequest generates requests for GetV1ReportsKeyExport
func NewGetV1ReportsKeyExportRequest(server string, key string, params *GetV1ReportsKeyExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reports/%s/export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ReportsKeyRunRequest calls the generic PostV1ReportsKeyRun builder with application/json body
func NewPostV1ReportsKeyRunRequest(server string, key string, params *PostV1ReportsKeyRunParams, body PostV1ReportsKeyRunJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ReportsKeyRunRequestWithBody(server, key, params, "application/json", bodyReader)
}

// NewPostV1ReportsKeyRunRequestWithBody generates requests for PostV1ReportsKeyRun with any type of body
func NewPostV1ReportsKeyRunRequestWithBody(server string, key string, params *PostV1ReportsKeyRunParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reports/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.DatasourceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "datasource_id", runtime.ParamLocationQuery, *params.DatasourceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ReportsKeyVersionsRequest calls the generic PostV1ReportsKeyVersions builder with application/json body
func NewPostV1ReportsKeyVersionsRequest(server string, key string, body PostV1ReportsKeyVersionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ReportsKeyVersionsRequestWithBody(server, key, "application/json", bodyReader)
}

// NewPostV1ReportsKeyVersionsRequestWithBody generates requests for PostV1ReportsKeyVersions with any type of body
func NewPostV1ReportsKeyVersionsRequestWithBody(server string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/reports/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1RunsRunIdAnalyzeRequest calls the generic PostV1RunsRunIdAnalyze builder with application/json body
func NewPostV1RunsRunIdAnalyzeRequest(server string, runId int64, body PostV1RunsRunIdAnalyzeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1RunsRunIdAnalyzeRequestWithBody(server, runId, "application/json", bodyReader)
}

// NewPostV1RunsRunIdAnalyzeRequestWithBody generates requests for PostV1RunsRunIdAnalyze with any type of body
func NewPostV1RunsRunIdAnalyzeRequestWithBody(server string, runId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "run_id", runtime.ParamLocationPath, runId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/runs/%s/analyze", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1SchemaDatasourceIdRequest generates requests for GetV1SchemaDatasourceId
func NewGetV1SchemaDatasourceIdRequest(server string, datasourceId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "datasource_id", runtime.ParamLocationPath, datasourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/schema/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ScopesRequest calls the generic PostV1Scopes builder with application/json body
func NewPostV1ScopesRequest(server string, body PostV1ScopesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ScopesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ScopesRequestWithBody generates requests for PostV1Scopes with any type of body
func NewPostV1ScopesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1ScopesIdRequest generates requests for GetV1ScopesId
func NewGetV1ScopesIdRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ScopesIdVersionRequest calls the generic PostV1ScopesIdVersion builder with application/json body
func NewPostV1ScopesIdVersionRequest(server string, id int64, body PostV1ScopesIdVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ScopesIdVersionRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostV1ScopesIdVersionRequestWithBody generates requests for PostV1ScopesIdVersion with any type of body
func NewPostV1ScopesIdVersionRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scopes/%s/version", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1SqlRequest calls the generic PostV1Sql builder with application/json body
func NewPostV1SqlRequest(server string, body PostV1SqlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1SqlRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1SqlRequestWithBody generates requests for PostV1Sql with any type of body
func NewPostV1SqlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1WsRequest generates requests for GetV1Ws
func NewGetV1WsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetV1AiToolsWithResponse request
	GetV1AiToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AiToolsResponse, error)

	// GetV1DatasourcesWithResponse request
	GetV1DatasourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DatasourcesResponse, error)

	// PostV1DatasourcesWithBodyWithResponse request with any body
	PostV1DatasourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DatasourcesResponse, error)

	PostV1DatasourcesWithResponse(ctx context.Context, body PostV1DatasourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DatasourcesResponse, error)

	// DeleteV1DatasourcesIdWithResponse request
	DeleteV1DatasourcesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1DatasourcesIdResponse, error)

	// GetV1DatasourcesIdHealthWithResponse request
	GetV1DatasourcesIdHealthWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DatasourcesIdHealthResponse, error)

	// PostV1IrBuildWithBodyWithResponse request with any body
	PostV1IrBuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IrBuildResponse, error)

	PostV1IrBuildWithResponse(ctx context.Context, body PostV1IrBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IrBuildResponse, error)

	// PostV1LearnWithBodyWithResponse request with any body
	PostV1LearnWithBodyWithResponse(ctx context.Context, params *PostV1LearnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1LearnResponse, error)

	PostV1LearnWithResponse(ctx context.Context, params *PostV1LearnParams, body PostV1LearnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1LearnResponse, error)

	// PostV1ReportsWithBodyWithResponse request with any body
	PostV1ReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReportsResponse, error)

	PostV1ReportsWithResponse(ctx context.Context, body PostV1ReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReportsResponse, error)

	// GetV1ReportsKeyWithResponse request
	GetV1ReportsKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetV1ReportsKeyResponse, error)

	// GetV1ReportsKeyExportWithResponse request
	GetV1ReportsKeyExportWithResponse(ctx context.Context, key string, params *GetV1ReportsKeyExportParams, reqEditors ...RequestEditorFn) (*GetV1ReportsKeyExportResponse, error)

	// PostV1ReportsKeyRunWithBodyWithResponse request with any body
	PostV1ReportsKeyRunWithBodyWithResponse(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyRunResponse, error)

	PostV1ReportsKeyRunWithResponse(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, body PostV1ReportsKeyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyRunResponse, error)

	// PostV1ReportsKeyVersionsWithBodyWithResponse request with any body
	PostV1ReportsKeyVersionsWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyVersionsResponse, error)

	PostV1ReportsKeyVersionsWithResponse(ctx context.Context, key string, body PostV1ReportsKeyVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyVersionsResponse, error)

	// PostV1RunsRunIdAnalyzeWithBodyWithResponse request with any body
	PostV1RunsRunIdAnalyzeWithBodyWithResponse(ctx context.Context, runId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1RunsRunIdAnalyzeResponse, error)

	PostV1RunsRunIdAnalyzeWithResponse(ctx context.Context, runId int64, body PostV1RunsRunIdAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1RunsRunIdAnalyzeResponse, error)

	// GetV1SchemaDatasourceIdWithResponse request
	GetV1SchemaDatasourceIdWithResponse(ctx context.Context, datasourceId string, reqEditors ...RequestEditorFn) (*GetV1SchemaDatasourceIdResponse, error)

	// PostV1ScopesWithBodyWithResponse request with any body
	PostV1ScopesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScopesResponse, error)

	PostV1ScopesWithResponse(ctx context.Context, body PostV1ScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScopesResponse, error)

	// GetV1ScopesIdWithResponse request
	GetV1ScopesIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetV1ScopesIdResponse, error)

	// PostV1ScopesIdVersionWithBodyWithResponse request with any body
	PostV1ScopesIdVersionWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScopesIdVersionResponse, error)

	PostV1ScopesIdVersionWithResponse(ctx context.Context, id int64, body PostV1ScopesIdVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScopesIdVersionResponse, error)

	// PostV1SqlWithBodyWithResponse request with any body
	PostV1SqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SqlResponse, error)

	PostV1SqlWithResponse(ctx context.Context, body PostV1SqlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SqlResponse, error)

	// GetV1WsWithResponse request
	GetV1WsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1WsResponse, error)
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthResponse
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AiToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Tools *[]struct {
			Description *string                 `json:"description,omitempty"`
			Name        *string                 `json:"name,omitempty"`
			Parameters  *map[string]interface{} `json:"parameters,omitempty"`
		} `json:"tools,omitempty"`
	}
	JSON401 *Unauthorized
	JSON500 *InternalError
}

// Status returns HTTPResponse.Status
func (r GetV1AiToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AiToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DatasourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatasourcesResponse
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetV1DatasourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DatasourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1DatasourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SuccessResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1DatasourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1DatasourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1DatasourcesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r DeleteV1DatasourcesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1DatasourcesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1DatasourcesIdHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheckResponse
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetV1DatasourcesIdHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1DatasourcesIdHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1IrBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Ir Intermediate Representation JSON
		Ir             *map[string]interface{} `json:"ir,omitempty"`
		ScopeVersionId *int64                  `json:"scope_version_id,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1IrBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1IrBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1LearnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SuccessResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1LearnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1LearnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Report
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1ReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ReportsKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetV1ReportsKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ReportsKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ReportsKeyExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetV1ReportsKeyExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ReportsKeyExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ReportsKeyRunResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportRun
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1ReportsKeyRunResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ReportsKeyRunResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ReportsKeyVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ReportVersion
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1ReportsKeyVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ReportsKeyVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1RunsRunIdAnalyzeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportAnalysis
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1RunsRunIdAnalyzeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1RunsRunIdAnalyzeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1SchemaDatasourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DatasourceId *string       `json:"datasource_id,omitempty"`
		SchemaNotes  *[]SchemaNote `json:"schema_notes,omitempty"`
	}
	JSON401 *Unauthorized
	JSON404 *NotFound
	JSON500 *InternalError
}

// Status returns HTTPResponse.Status
func (r GetV1SchemaDatasourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1SchemaDatasourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Scope
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1ScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ScopesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scope
	JSON401      *Unauthorized
	JSON404      *NotFound
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r GetV1ScopesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ScopesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ScopesIdVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ScopeVersion
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1ScopesIdVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ScopesIdVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1SqlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DatasourceId *string `json:"datasource_id,omitempty"`

		// SafetyReport Safety analysis report
		SafetyReport *map[string]interface{} `json:"safety_report,omitempty"`

		// Sql Generated SQL query
		Sql *string `json:"sql,omitempty"`
	}
	JSON400 *BadRequest
	JSON401 *Unauthorized
	JSON500 *InternalError
}

// Status returns HTTPResponse.Status
func (r PostV1SqlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1SqlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1WsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
}

// Status returns HTTPResponse.Status
func (r GetV1WsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1WsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetV1AiToolsWithResponse request returning *GetV1AiToolsResponse
func (c *ClientWithResponses) GetV1AiToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1AiToolsResponse, error) {
	rsp, err := c.GetV1AiTools(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AiToolsResponse(rsp)
}

// GetV1DatasourcesWithResponse request returning *GetV1DatasourcesResponse
func (c *ClientWithResponses) GetV1DatasourcesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1DatasourcesResponse, error) {
	rsp, err := c.GetV1Datasources(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DatasourcesResponse(rsp)
}

// PostV1DatasourcesWithBodyWithResponse request with arbitrary body returning *PostV1DatasourcesResponse
func (c *ClientWithResponses) PostV1DatasourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DatasourcesResponse, error) {
	rsp, err := c.PostV1DatasourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DatasourcesResponse(rsp)
}

func (c *ClientWithResponses) PostV1DatasourcesWithResponse(ctx context.Context, body PostV1DatasourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DatasourcesResponse, error) {
	rsp, err := c.PostV1Datasources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1DatasourcesResponse(rsp)
}

// DeleteV1DatasourcesIdWithResponse request returning *DeleteV1DatasourcesIdResponse
func (c *ClientWithResponses) DeleteV1DatasourcesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteV1DatasourcesIdResponse, error) {
	rsp, err := c.DeleteV1DatasourcesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1DatasourcesIdResponse(rsp)
}

// GetV1DatasourcesIdHealthWithResponse request returning *GetV1DatasourcesIdHealthResponse
func (c *ClientWithResponses) GetV1DatasourcesIdHealthWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetV1DatasourcesIdHealthResponse, error) {
	rsp, err := c.GetV1DatasourcesIdHealth(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1DatasourcesIdHealthResponse(rsp)
}

// PostV1IrBuildWithBodyWithResponse request with arbitrary body returning *PostV1IrBuildResponse
func (c *ClientWithResponses) PostV1IrBuildWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1IrBuildResponse, error) {
	rsp, err := c.PostV1IrBuildWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IrBuildResponse(rsp)
}

func (c *ClientWithResponses) PostV1IrBuildWithResponse(ctx context.Context, body PostV1IrBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1IrBuildResponse, error) {
	rsp, err := c.PostV1IrBuild(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1IrBuildResponse(rsp)
}

// PostV1LearnWithBodyWithResponse request with arbitrary body returning *PostV1LearnResponse
func (c *ClientWithResponses) PostV1LearnWithBodyWithResponse(ctx context.Context, params *PostV1LearnParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1LearnResponse, error) {
	rsp, err := c.PostV1LearnWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1LearnResponse(rsp)
}

func (c *ClientWithResponses) PostV1LearnWithResponse(ctx context.Context, params *PostV1LearnParams, body PostV1LearnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1LearnResponse, error) {
	rsp, err := c.PostV1Learn(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1LearnResponse(rsp)
}

// PostV1ReportsWithBodyWithResponse request with arbitrary body returning *PostV1ReportsResponse
func (c *ClientWithResponses) PostV1ReportsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReportsResponse, error) {
	rsp, err := c.PostV1ReportsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReportsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ReportsWithResponse(ctx context.Context, body PostV1ReportsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReportsResponse, error) {
	rsp, err := c.PostV1Reports(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReportsResponse(rsp)
}

// GetV1ReportsKeyWithResponse request returning *GetV1ReportsKeyResponse
func (c *ClientWithResponses) GetV1ReportsKeyWithResponse(ctx context.Context, key string, reqEditors ...RequestEditorFn) (*GetV1ReportsKeyResponse, error) {
	rsp, err := c.GetV1ReportsKey(ctx, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ReportsKeyResponse(rsp)
}

// GetV1ReportsKeyExportWithResponse request returning *GetV1ReportsKeyExportResponse
func (c *ClientWithResponses) GetV1ReportsKeyExportWithResponse(ctx context.Context, key string, params *GetV1ReportsKeyExportParams, reqEditors ...RequestEditorFn) (*GetV1ReportsKeyExportResponse, error) {
	rsp, err := c.GetV1ReportsKeyExport(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ReportsKeyExportResponse(rsp)
}

// PostV1ReportsKeyRunWithBodyWithResponse request with arbitrary body returning *PostV1ReportsKeyRunResponse
func (c *ClientWithResponses) PostV1ReportsKeyRunWithBodyWithResponse(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyRunResponse, error) {
	rsp, err := c.PostV1ReportsKeyRunWithBody(ctx, key, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReportsKeyRunResponse(rsp)
}

func (c *ClientWithResponses) PostV1ReportsKeyRunWithResponse(ctx context.Context, key string, params *PostV1ReportsKeyRunParams, body PostV1ReportsKeyRunJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyRunResponse, error) {
	rsp, err := c.PostV1ReportsKeyRun(ctx, key, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReportsKeyRunResponse(rsp)
}

// PostV1ReportsKeyVersionsWithBodyWithResponse request with arbitrary body returning *PostV1ReportsKeyVersionsResponse
func (c *ClientWithResponses) PostV1ReportsKeyVersionsWithBodyWithResponse(ctx context.Context, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyVersionsResponse, error) {
	rsp, err := c.PostV1ReportsKeyVersionsWithBody(ctx, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReportsKeyVersionsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ReportsKeyVersionsWithResponse(ctx context.Context, key string, body PostV1ReportsKeyVersionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ReportsKeyVersionsResponse, error) {
	rsp, err := c.PostV1ReportsKeyVersions(ctx, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ReportsKeyVersionsResponse(rsp)
}

// PostV1RunsRunIdAnalyzeWithBodyWithResponse request with arbitrary body returning *PostV1RunsRunIdAnalyzeResponse
func (c *ClientWithResponses) PostV1RunsRunIdAnalyzeWithBodyWithResponse(ctx context.Context, runId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1RunsRunIdAnalyzeResponse, error) {
	rsp, err := c.PostV1RunsRunIdAnalyzeWithBody(ctx, runId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1RunsRunIdAnalyzeResponse(rsp)
}

func (c *ClientWithResponses) PostV1RunsRunIdAnalyzeWithResponse(ctx context.Context, runId int64, body PostV1RunsRunIdAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1RunsRunIdAnalyzeResponse, error) {
	rsp, err := c.PostV1RunsRunIdAnalyze(ctx, runId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1RunsRunIdAnalyzeResponse(rsp)
}

// GetV1SchemaDatasourceIdWithResponse request returning *GetV1SchemaDatasourceIdResponse
func (c *ClientWithResponses) GetV1SchemaDatasourceIdWithResponse(ctx context.Context, datasourceId string, reqEditors ...RequestEditorFn) (*GetV1SchemaDatasourceIdResponse, error) {
	rsp, err := c.GetV1SchemaDatasourceId(ctx, datasourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1SchemaDatasourceIdResponse(rsp)
}

// PostV1ScopesWithBodyWithResponse request with arbitrary body returning *PostV1ScopesResponse
func (c *ClientWithResponses) PostV1ScopesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScopesResponse, error) {
	rsp, err := c.PostV1ScopesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScopesResponse(rsp)
}

func (c *ClientWithResponses) PostV1ScopesWithResponse(ctx context.Context, body PostV1ScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScopesResponse, error) {
	rsp, err := c.PostV1Scopes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScopesResponse(rsp)
}

// GetV1ScopesIdWithResponse request returning *GetV1ScopesIdResponse
func (c *ClientWithResponses) GetV1ScopesIdWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*GetV1ScopesIdResponse, error) {
	rsp, err := c.GetV1ScopesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ScopesIdResponse(rsp)
}

// PostV1ScopesIdVersionWithBodyWithResponse request with arbitrary body returning *PostV1ScopesIdVersionResponse
func (c *ClientWithResponses) PostV1ScopesIdVersionWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ScopesIdVersionResponse, error) {
	rsp, err := c.PostV1ScopesIdVersionWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScopesIdVersionResponse(rsp)
}

func (c *ClientWithResponses) PostV1ScopesIdVersionWithResponse(ctx context.Context, id int64, body PostV1ScopesIdVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ScopesIdVersionResponse, error) {
	rsp, err := c.PostV1ScopesIdVersion(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ScopesIdVersionResponse(rsp)
}

// PostV1SqlWithBodyWithResponse request with arbitrary body returning *PostV1SqlResponse
func (c *ClientWithResponses) PostV1SqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1SqlResponse, error) {
	rsp, err := c.PostV1SqlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SqlResponse(rsp)
}

func (c *ClientWithResponses) PostV1SqlWithResponse(ctx context.Context, body PostV1SqlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1SqlResponse, error) {
	rsp, err := c.PostV1Sql(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1SqlResponse(rsp)
}

// GetV1WsWithResponse request returning *GetV1WsResponse
func (c *ClientWithResponses) GetV1WsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetV1WsResponse, error) {
	rsp, err := c.GetV1Ws(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1WsResponse(rsp)
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1AiToolsResponse parses an HTTP response from a GetV1AiToolsWithResponse call
func ParseGetV1AiToolsResponse(rsp *http.Response) (*GetV1AiToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AiToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Tools *[]struct {
				Description *string                 `json:"description,omitempty"`
				Name        *string                 `json:"name,omitempty"`
				Parameters  *map[string]interface{} `json:"parameters,omitempty"`
			} `json:"tools,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DatasourcesResponse parses an HTTP response from a GetV1DatasourcesWithResponse call
func ParseGetV1DatasourcesResponse(rsp *http.Response) (*GetV1DatasourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DatasourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatasourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1DatasourcesResponse parses an HTTP response from a PostV1DatasourcesWithResponse call
func ParsePostV1DatasourcesResponse(rsp *http.Response) (*PostV1DatasourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1DatasourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteV1DatasourcesIdResponse parses an HTTP response from a DeleteV1DatasourcesIdWithResponse call
func ParseDeleteV1DatasourcesIdResponse(rsp *http.Response) (*DeleteV1DatasourcesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1DatasourcesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1DatasourcesIdHealthResponse parses an HTTP response from a GetV1DatasourcesIdHealthWithResponse call
func ParseGetV1DatasourcesIdHealthResponse(rsp *http.Response) (*GetV1DatasourcesIdHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1DatasourcesIdHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheckResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1IrBuildResponse parses an HTTP response from a PostV1IrBuildWithResponse call
func ParsePostV1IrBuildResponse(rsp *http.Response) (*PostV1IrBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1IrBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Ir Intermediate Representation JSON
			Ir             *map[string]interface{} `json:"ir,omitempty"`
			ScopeVersionId *int64                  `json:"scope_version_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1LearnResponse parses an HTTP response from a PostV1LearnWithResponse call
func ParsePostV1LearnResponse(rsp *http.Response) (*PostV1LearnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1LearnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SuccessResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ReportsResponse parses an HTTP response from a PostV1ReportsWithResponse call
func ParsePostV1ReportsResponse(rsp *http.Response) (*PostV1ReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ReportsKeyResponse parses an HTTP response from a GetV1ReportsKeyWithResponse call
func ParseGetV1ReportsKeyResponse(rsp *http.Response) (*GetV1ReportsKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ReportsKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ReportsKeyExportResponse parses an HTTP response from a GetV1ReportsKeyExportWithResponse call
func ParseGetV1ReportsKeyExportResponse(rsp *http.Response) (*GetV1ReportsKeyExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ReportsKeyExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ReportsKeyRunResponse parses an HTTP response from a PostV1ReportsKeyRunWithResponse call
func ParsePostV1ReportsKeyRunResponse(rsp *http.Response) (*PostV1ReportsKeyRunResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ReportsKeyRunResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportRun
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ReportsKeyVersionsResponse parses an HTTP response from a PostV1ReportsKeyVersionsWithResponse call
func ParsePostV1ReportsKeyVersionsResponse(rsp *http.Response) (*PostV1ReportsKeyVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ReportsKeyVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ReportVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1RunsRunIdAnalyzeResponse parses an HTTP response from a PostV1RunsRunIdAnalyzeWithResponse call
func ParsePostV1RunsRunIdAnalyzeResponse(rsp *http.Response) (*PostV1RunsRunIdAnalyzeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1RunsRunIdAnalyzeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportAnalysis
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1SchemaDatasourceIdResponse parses an HTTP response from a GetV1SchemaDatasourceIdWithResponse call
func ParseGetV1SchemaDatasourceIdResponse(rsp *http.Response) (*GetV1SchemaDatasourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1SchemaDatasourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DatasourceId *string       `json:"datasource_id,omitempty"`
			SchemaNotes  *[]SchemaNote `json:"schema_notes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ScopesResponse parses an HTTP response from a PostV1ScopesWithResponse call
func ParsePostV1ScopesResponse(rsp *http.Response) (*PostV1ScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1ScopesIdResponse parses an HTTP response from a GetV1ScopesIdWithResponse call
func ParseGetV1ScopesIdResponse(rsp *http.Response) (*GetV1ScopesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ScopesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1ScopesIdVersionResponse parses an HTTP response from a PostV1ScopesIdVersionWithResponse call
func ParsePostV1ScopesIdVersionResponse(rsp *http.Response) (*PostV1ScopesIdVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ScopesIdVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ScopeVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostV1SqlResponse parses an HTTP response from a PostV1SqlWithResponse call
func ParsePostV1SqlResponse(rsp *http.Response) (*PostV1SqlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1SqlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DatasourceId *string `json:"datasource_id,omitempty"`

			// SafetyReport Safety analysis report
			SafetyReport *map[string]interface{} `json:"safety_report,omitempty"`

			// Sql Generated SQL query
			Sql *string `json:"sql,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetV1WsResponse parses an HTTP response from a GetV1WsWithResponse call
func ParseGetV1WsResponse(rsp *http.Response) (*GetV1WsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1WsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
